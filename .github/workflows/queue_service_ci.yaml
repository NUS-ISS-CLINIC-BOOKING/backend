name: CI queue-service

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - 'gateway/**'
      - 'common/**'
      - '.github/workflows/queue_service_ci.yaml'
  pull_request:
    branches: ["main"]
    paths:
      - 'gateway/**'
      - 'common/**'
      - '.github/workflows/queue_service_ci.yaml'

defaults:
  run:
    shell: bash
    working-directory: .

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.export-tag.outputs.tag }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Shutdown system MySQL service (if running)
        run: sudo service mysql stop

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -pl queue-service -am clean install

      - name: Build Docker Image
        run: |
          REPO=${{ secrets.GCP_ARTIFACT_REPO }}
          TAG=${{ github.sha }}
          docker build -t queue-service:ci-temp -t $REPO/queue-service:$TAG -f queue-service/Dockerfile queue-service/

      - name: Save Docker Image to TAR
        run: |
          docker save queue-service:ci-temp -o queue-service.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: queue-service-image
          path: queue-service.tar

      - name: Export Tag for Push Job
        id: export-tag
        run: echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  push:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: queue-service-image
          path: .

      - name: Load Docker Image
        run: docker load -i queue-service.tar

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Configure Docker for GCP
        run: |
          REGION=$(echo "${{ secrets.GCP_ARTIFACT_REPO }}" | cut -d/ -f1)
          gcloud auth configure-docker $REGION

      - name: Push Docker Image to GCP
        run: |
          REPO=${{ secrets.GCP_ARTIFACT_REPO }}
          RAW_TAG=${{ needs.build.outputs.tag }}

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TAG=${RAW_TAG}-pr
          else
            TAG=${RAW_TAG}
          fi

          docker tag queue-service:ci-temp $REPO/queue-service:$TAG
          docker push $REPO/queue-service:$TAG

          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            docker tag $REPO/queue-service:$TAG $REPO/queue-service:latest
            docker push $REPO/queue-service:latest
          fi
          
  deploy:
    needs: [ build, push ]
    runs-on: ubuntu-latest
    environment:
      name: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Export Docker tag
        run: echo "TAG=${{ needs.build.outputs.tag }}" >> $GITHUB_ENV

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: clinic-booking
          location: asia-southeast1
          project_id: clinic-booking-460414

      - name: Get Container Name from Deployment
        id: container
        run: |
          CONTAINER=$(kubectl -n default get deployment queue-service -o=jsonpath="{.spec.template.spec.containers[0].name}")
          echo "Container name is: $CONTAINER"
          echo "container_name=$CONTAINER" >> $GITHUB_OUTPUT

      - name: Update Deployment Image
        run: |
          REPO=${{ secrets.GCP_ARTIFACT_REPO }}
          TAG=${{ needs.build.outputs.tag }}
          CONTAINER=${{ steps.container.outputs.container_name }}

          echo "Deploying $REPO/queue-service:$TAG to container $CONTAINER"
          kubectl -n default set image deployment/queue-service $CONTAINER=$REPO/queue-service:$TAG

      - name: Wait for Rollout
        run: |
          kubectl -n default rollout status deployment/queue-service